@charset "UTF-8"; // Make sure the charset is set appropriately


//----------------------------------*\
// BOURBON MIXINS
//----------------------------------*\
// http://bourbon.io/docs/
@import
  'bourbon';



// ----------------------------------*\
// THEME DEPENDENCIES
//----------------------------------*/
@import
'../../helpers/colors';

//----------------------------------*\
// BRAND COLOR VARIABLES
//----------------------------------*/
// TODO.. https://github.com/manojkm/flask
// Begin by defining base colours. You can simply define these inside the palette map instead,
// but separate variables outside of the map make it easier.

/* Primary */
$primary-background: $turquoise; // Used as the background for primary buttons, color for primary links etc...
$primary-foreground: $white-color; // Used as the text color on primary background.

/* Secondary  */
$secondary-background: $mauve; // Used as the background for secondary buttons, color for secondary links etc...
$secondary-foreground: $white-color; // Used as the text color on secondary background.

/* Header */
$header-background: $midnight-blue; // Used as the background color of Header.
$header-colors: #ff0000, #ff0000, #ff0000, #000; // Order: font-color, link-color, hover-color, active-color. Use darken(), lighten() functions if required.

/* Sidebar */
$sidebar-background: $midnight-blue; // Used as the background color of Sidebar.
$sidebar-colors: #ff0000, #ff0000, #ff0000, #000; // Order: font-color, link-color, hover-color, active-color. Use darken(), lighten() functions if required.

/* Aside */
$aside-background: $midnight-blue; // Used as the background color of Aside.
$aside-colors: #ff0000, #ff0000, #ff0000, #000; // Order: font-color, link-color, hover-color, active-color. Use darken(), lighten() functions if required.

/* Footer */
$footer-background: $midnight-blue; // Used as the background color of Footer.
$footer-colors: #ff0000, #ff0000, #ff0000, #000; // Order: font-color, link-color, hover-color, active-color. Use darken(), lighten() functions if required.

/* Colour shades amount */
$color-shade-amount: 4%; // Used to generate base, light & dark color shades

//----------------------------------*\
// THEME PALETTE MAP
//----------------------------------*/
// Theme palette are all stored in a map data-structure which gives flexibility
// when traversing based on keys and also looking up values based on strings

/* Define color/shade map */
// TODO for  tomorrow https://stackoverflow.com/questions/33856034/dynamically-build-up-a-sass-map-and-then-use-the-values

$rebecca-palette-map : (
        'main-colors': (
                'primary': (
                        'base': $primary-background,
                        'light': lighten($primary-background, $color-shade-amount),
                        'x-light': lighten($primary-background, ($color-shade-amount * 2)),
                        'xx-light': lighten($primary-background, ($color-shade-amount  * 3)),
                        'dark':darken($primary-background, $color-shade-amount),
                        'x-dark':darken($primary-background, ($color-shade-amount * 2)),
                        'xx-dark':darken($primary-background, ($color-shade-amount * 3)),
                        'font-color':$primary-foreground,
                ),
                'secondary': (
                        'base': $secondary-background,
                        'light': lighten($secondary-background, $color-shade-amount),
                        'x-light': lighten($secondary-background, ($color-shade-amount * 2)),
                        'xx-light': lighten($secondary-background, ($color-shade-amount * 3)),
                        'dark':darken($secondary-background, $color-shade-amount),
                        'x-dark':darken($secondary-background, ($color-shade-amount  * 2)),
                        'xx-dark':darken($secondary-background, ($color-shade-amount * 3)),
                        'font-color':$secondary-foreground,
                )
        ),
        'partial-colors': (
                'header': (
                        'base': $header-background,
                        'light': lighten($header-background, $color-shade-amount),
                        'x-light': lighten($header-background, ($color-shade-amount * 2)),
                        'xx-light': lighten($header-background, ($color-shade-amount * 3)),
                        'dark': darken($header-background, $color-shade-amount),
                        'x-dark':darken($header-background, ($color-shade-amount  * 2)),
                        'xx-dark':darken($header-background, ($color-shade-amount * 3)),
                        'font-color': nth($header-colors, 1),
                        'link-color': nth($header-colors, 2),
                        'hover-color': nth($header-colors, 3),
                        'active-color': nth($header-colors, 4),
                ),
                'sidebar': (
                        'base': $sidebar-background,
                        'light': lighten($sidebar-background, $color-shade-amount),
                        'x-light': lighten($sidebar-background, ($color-shade-amount * 2)),
                        'xx-light': lighten($sidebar-background, ($color-shade-amount * 3)),
                        'dark': darken($sidebar-background, $color-shade-amount),
                        'x-dark':darken($sidebar-background, ($color-shade-amount  * 2)),
                        'xx-dark':darken($sidebar-background, ($color-shade-amount * 3)),
                        'font-color': nth($sidebar-colors, 1),
                        'link-color': nth($sidebar-colors, 2),
                        'hover-color': nth($sidebar-colors, 3),
                        'active-color': nth($sidebar-colors, 4),
                ),
                'aside': (
                        'base': $aside-background,
                        'light': lighten($aside-background, $color-shade-amount),
                        'x-light': lighten($aside-background, ($color-shade-amount * 2)),
                        'xx-light': lighten($aside-background, ($color-shade-amount * 3)),
                        'dark': darken($aside-background, $color-shade-amount),
                        'x-dark':darken($aside-background, ($color-shade-amount  * 2)),
                        'xx-dark':darken($aside-background, ($color-shade-amount * 3)),
                        'font-color': nth($aside-colors, 1),
                        'link-color': nth($aside-colors, 2),
                        'hover-color': nth($aside-colors, 3),
                        'active-color': nth($aside-colors, 4),
                ),
                'footer': (
                        'base': $footer-background,
                        'light': lighten($footer-background, $color-shade-amount),
                        'x-light': lighten($footer-background, ($color-shade-amount * 2)),
                        'xx-light': lighten($footer-background, ($color-shade-amount * 3)),
                        'dark': darken($footer-background, $color-shade-amount),
                        'x-dark':darken($footer-background, ($color-shade-amount  * 2)),
                        'xx-dark':darken($footer-background, ($color-shade-amount * 3)),
                        'font-color': nth($footer-colors, 1),
                        'link-color': nth($footer-colors, 2),
                        'hover-color': nth($footer-colors, 3),
                        'active-color': nth($footer-colors, 4),
                ),
          //'green': #71d366,  // non-nested values
        ),
);



//----------------------------------*\
// THEMES MAP
//----------------------------------*/
// Themes are all stored in a map data-structure which gives flexibility
// when traversing based on keys and also looking up values based on strings

$themes-map: (
  /* Define the name of your theme as the key and corresponding palette map variable as the value */
        rebecca: $rebecca-palette-map,
  //'unicorn': ()
);




@import
'../../apptest';