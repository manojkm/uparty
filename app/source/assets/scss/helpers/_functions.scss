// ================================================================================================
// File Name: functions.scss
// Description:
// ----------------------------------------------------------------------------------------------
// Item Name: xxx - Responsive Admin Theme
// Version: 1.2
// Author: MANOJ
// Author URL: http://www.themeforest.net/user/xxx
// ================================================================================================

//----------------------------------*\
// MAP GET ERROR HANDLING
//----------------------------------*/
/**
 * This function should warn if a theme requirement isn't met,
 * helping to catch any issues at compile time in development
 */

/* Usage map-get-strict($font-html, size); */

@function map-get-strict($map, $key) {
  @if map-has-key($map, $key) {
    @return map-get($map, $key);
  } @else {
    @warn 'Unfortunately, no value could be retrieved from "#{$key}". '
        + 'Please make sure it is defined in map.';
  }
}

//----------------------------------*\
// REM FONT SIZE CALCULATING
//----------------------------------*/
/* Adapted from http://www.stubbornella.org/content/2013/07/01/easy-peasy-rem-conversion-with-sass/ */

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}

//----------------------------------*\
// CHECK BOOLEAN VALUE
//----------------------------------*/
@function bool($value: false) {
  @if $value == false or
          $value == "" or
          $value == "false" or
          $value == 'false' or
          $value == 0 {
    @return false;
  }
  @return true;
}

//----------------------------------*\
// SET CONTEXTUAL COLORS
//----------------------------------*/
/* Adapted from https://webdesign.tutsplus.com/tutorials/an-introduction-to-sass-maps-usage-and-examples--cms-22184 */
/* Our function for shorter usage of map-get(); */
@function contextual-color($scheme, $tone:base) {
  @if type-of(map-get(map-get($contextual, $scheme), $tone)) == color {
    @return map-get(map-get($contextual, $scheme), $tone);
  } @else {
    @warn "Make sure you pass a valid color for '#{$tone}' in Theme/Contextual Sass maps";
  }
}

//----------------------------------*\
// SET THEME COLORS
//----------------------------------*/

@function theme-color($scheme, $tone) {
  @each $themeName, $value in $themes {
    $colors: map-get-strict($value, 'main-colors');
    @if type-of(map-get-strict(map-get-strict($colors, $scheme), $tone)) == color {
      @return map-get-strict(map-get-strict($colors, $scheme), $tone);
    } @else {
      @warn "Make sure you pass a valid color for '#{$tone}' in Theme Sass maps";
    }
  }
}

// ==========================================================================
// ROUNDING DECIMALS
// ==========================================================================
// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function decimal-ceil ($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     decimal-floor(0.333)    => 0
//     decimal-floor(0.333, 1) => 0.3
//     decimal-floor(0.333, 2) => 0.33
//     decimal-floor(0.666)    => 0
//     decimal-floor(0.666, 1) => 0.6
//     decimal-floor(0.666, 2) => 0.66
//
@function decimal-floor ($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}


// ==========================================================================
// FONT-FACE
// ==========================================================================
// Adapted from sassy-starter http://minamarkham.github.io/sassy-starter/
@if variable-exists(google-fonts-import) {
  @import url($google-fonts-import);
}

@if variable-exists(typefaces) {
  @each $file, $option in $typefaces {
    @font-face {
      font-family: map-get(map-get($typefaces, $file), family);
      src: url('../fonts/#{$file}.ttf') format('truetype'),
      url('../fonts/#{$file}.woff') format('woff'),
      url('../fonts/#{$file}.woff2') format('woff2');
    }
  }
}


//----------------------------------*\
// RETRIEVE TYPOGRAPHY SASS MAPS
//----------------------------------*/
@function get-typography($key: size-md, $property:null) {

  @if ($property != null) {

    // Grab typography list for given section
    $typog-list: map-get-strict($typography, $key);

    @if $property == font-size {
      @return nth($typog-list, 1);
    } @else if $property == line-height {

      //** Computed "line-height" ('line-height' / 'font-size') for use with 'margin', 'padding', etc.
      @return  decimal-round(nth($typog-list, 2) / nth($typog-list, 1), 1);
    }

  } @else {
    @return map-get-strict($typography, $key);
  }

}

//----------------------------------*\
// Replace `$search` with `$replace` in `$string
//----------------------------------*/
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}
