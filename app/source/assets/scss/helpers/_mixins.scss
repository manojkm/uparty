// ================================================================================================
// File Name      : mixins.scss
// Description    :
// ------------------------------------------------------------------------------------------------
// Item Name      : xxx - Responsive Admin Theme
// Version        : 1.2
// Author         : MANOJ, <manoj [at] xxx [dot] net>
// Author URL     : http://www.themeforest.net/user/xxx
// ================================================================================================

//
// THEMIFY
// ======================================================

// Adapted from https://github.com/nborracha/plainID-DemoApp/blob/61b66cf018e918bcb17aa87f243fce2bc95d9833/app/styles/mixins.scss

@mixin themify($property, $key, $color-variant:null, $sledge-hammer:'', $themes: $themes-map) {

  // Iterate over the themes
  @each $themeName, $value in $themes {

    $main-colors: map-get-strict($value, 'main-colors');
    $partial-colors: map-get-strict($value, 'partial-colors');

    $theme-color: () !global;

    /// color variant is optional
    @if ($color-variant != null) {
      /// map inception
      @if map-has-key($main-colors, $key) {
        $theme-color: map-get-strict(map-get-strict($main-colors, $key), $color-variant) !global;
      } @else if map-has-key($partial-colors, $key) {
        $theme-color: map-get-strict(map-get-strict($partial-colors, $key), $color-variant) !global;
      } @else {
        @warn 'Unfortunately, no value could be retrieved from "#{$key}". '
        + 'Please make sure it is defined in this map: $#{$themeName}-palette-map.';
      }
    } @else {
      @if map-has-key($main-colors, $key) {
        $theme-color: map-get-strict($main-colors, $key) !global;
      } @else if map-has-key($partial-colors, $key) {
        $theme-color: map-get-strict($partial-colors, $key) !global;
      } @else {
        @warn 'Unfortunately, no value could be retrieved from "#{$key}". '
        + 'Please make sure it is defined in this map: $#{$themeName}-palette-map.';
      }
    }

    @if ($themeName == $activeTheme and bool($dynamicTheme) == false) { // TODO https://www.sitepoint.com/sass-theming-neverending-story/

      // Create a selector (e.g. `.media.theme-light, .theme-light .media`)
      // &.theme-#{$themeName},
      .theme-#{$themeName} & {
        // Output the declaration
        #{$property}: $theme-color #{$sledge-hammer};
        $theme-color: null !global;
      }
    } @else if ($dynamicTheme == true) {
      // Create a selector (e.g. `.media.theme-light, .theme-light .media`)
      // &.theme-#{$themeName},
      .theme-#{$themeName} & {
        // Output the declaration
        #{$property}: $theme-color #{$sledge-hammer};
        $theme-color: null !global;
      }
    }

  }

}

/// Shorthand to themify color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin color($arguments...) {
  @include themify('color', $arguments...);
}

/// Shorthand to themify border-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-color($arguments...) {
  @include themify('border-color', $arguments...);
}

/// Shorthand to themify border-left-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-left-color($arguments...) {
  @include themify('border-left-color', $arguments...);
}

/// Shorthand to themify border-right-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-right-color($arguments...) {
  @include themify('border-right-color', $arguments...);
}

/// Shorthand to themify border-top-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-top-color($arguments...) {
  @include themify('border-top-color', $arguments...);
}

/// Shorthand to themify border-bottom-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-bottom-color($arguments...) {
  @include themify('border-bottom-color', $arguments...);
}

/// Shorthand to themify background-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin background-color($arguments...) {
  @include themify('background-color', $arguments...);
}

/// Shorthand to themify --box-shadow-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin box-shadow-color($arguments...) {
  @include themify('--box-shadow-color', $arguments...);
}

/// Shorthand to themify font family through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin font-family($arguments...) {
  @include themify('font-family', $arguments...);
}

//
// COLOR CONTRAST
// ======================================================
// Used to fix text colors on light outlined buttons, tabs etc..

@mixin text-theme-color-yiq($scheme, $font-color:base, $sledge-hammer:null) {

  @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations

    $r: red(get-contextual-color($scheme, $font-color));
    $g: green(get-contextual-color($scheme, $font-color));
    $b: blue(get-contextual-color($scheme, $font-color));

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

    @if ($yiq >=150) {
      color: darken(get-contextual-color($scheme, $font-color), 50) $sledge-hammer;
    } @else {
      color: get-contextual-color($scheme, $font-color) $sledge-hammer;
    }

  } @else { // Theme variations

    $r: red(get-theme-main-color($scheme, $font-color));
    $g: green(get-theme-main-color($scheme, $font-color));
    $b: blue(get-theme-main-color($scheme, $font-color));

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

    @if ($yiq >=150) {
      color: darken(get-theme-main-color($scheme, $font-color), 50) $sledge-hammer;
    } @else {
      color: get-theme-main-color($scheme, $font-color) $sledge-hammer;
    }

  }

}

//
// TEXT SHADOW
// ======================================================

@mixin text-shadow($tShadow : 0px 1px 3px rgba(0,0,0,.5)) {
  -webkit-box-shadow: $tShadow;
  -moz-box-shadow: $tShadow;
  -o-box-shadow: $tShadow;
  box-shadow: $tShadow;
}

//
// BOX SHADOW
// ======================================================
@mixin box-shadow($shadow...) {
  @if $enable-shadows {
    box-shadow: $shadow;
  } @else {
    box-shadow: none;
  }

}

//
// TRANSITIONS
// ======================================================
// Usage @include transition(color .3s ease); @include transition;

@mixin transition($transitionvalue : all $general-transition-duration ease) {
  -webkit-transition: $transitionvalue;
  -o-transition: $transitionvalue;
  -moz-transition: $transitionvalue;
  transition: $transitionvalue;
}

//
// BORDER RADIUS
// ======================================================
// Usage @include border-radius(4px);

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

// Usage @include set-border-radius($input-border-radius-lg);
@mixin set-border-radius($radius) {
  @if $enable-rounded {
    border-radius: $radius;
  } @else {
    border-radius: 0;
  }
}

@mixin set-border-top-radius($radius) {
  @if $enable-rounded {
    @include border-top-radius($radius);
  } @else {
    @include border-top-radius(0);
  }
}

@mixin set-border-bottom-radius($radius) {
  @if $enable-rounded {
    @include border-bottom-radius($radius);
  } @else {
    @include border-bottom-radius(0);
  }
}

//
// BORDER
// ======================================================
// Usage
// @include add-border(1px, #cccccc, top);
// @include add-border(1px, #cccccc, right-left);
// @include add-border(1px, #cccccc, all);

@mixin add-border($size, $color, $position) {
  @if $position == 'all' {
    border: $size solid $color;
  } @else if $position == 'top' {
    border-top: $size solid $color;
  } @else if $position == 'bottom' {
    border-bottom: $size solid $color;
  } @else if $position == 'right' {
    border-right: $size solid $color;
  } @else if $position == 'left' {
    border-left: $size solid $color;
  } @else if $position == 'top-bottom' {
    border-top: $size solid $color;
    border-bottom: $size solid $color;
  } @else if $position == 'right-left' {
    border-right: $size solid $color;
    border-left: $size solid $color;
  } @else if $position == 'left-bottom' {
    border-bottom: $size solid $color;
    border-left: $size solid $color;
  }
}

//
// DIVIDER
// ======================================================
// @include divider(#333333, horizontal, top);

@mixin divider($color: $gray-200, $direction: 'horizontal', $pos: 'none', $size: 1px, $opacity: $alpha-5) {
  position: relative;

  &::after {
    position: absolute;
    left: 0;
    background-color: $color;
    opacity: $opacity;
    content: '';

    @if ($pos == 'top') {
      bottom: 100%;
    }

    @if ($pos == 'bottom') {
      top: 100%;
    }

    @if ($direction == 'horizontal') {
      width: 100%;
      height: $size;
    }

    @if ($direction == 'vertical') {
      top: 0;
      width: $size;
      height: 100%;
    }
  }
}

//
// VENDOR PREFIX
// ======================================================

@mixin vendor($property, $value...) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  -o-#{$property}: $value;
  #{$property}: $value;
}

//
// CLEARFIX FOR IE8 & ABOVE
// ======================================================
// Adapted from http://css-tricks.com/snippets/css/clear-fix/

@mixin clearfix {
  &:after {
    display: table;
    content: "";
    clear: both;
  }
}

//
// CENTERING
// ======================================================
// Center vertically and/or horizontally an absolute positioned element

@mixin center($xy:xy) {
  @if $xy == xy {
    top: 50%;
    right: auto;
    bottom: auto;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
  } @else if $xy == x {
    right: auto;
    left: 50%;
    transform: translateX(-50%);
  } @else if $xy == y {
    top: 50%;
    bottom: auto;
    transform: translateY(-50%);
  }
}

//
// BACKGROUND OPACITY
// ======================================================

@mixin bg-opacity($class-slug, $color) {
  @for $i from 1 through 9 {
    .bg-#{$class-slug}-opacity-#{$i} {
      @include transition;
      background-color: rgba($color, 0 + ($i * 0.1)) !important;
    }
  }
}

//
// CONTEXTUAL & THEME TEXT VARIANTS
// ======================================================

@mixin text-theme($scheme, $font-color:base, $sledge-hammer:null) {

  @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations
    @if ($scheme == 'light') { // Fix colors on light outlined buttons, tabs etc..
      @include text-theme-color-yiq($scheme, $font-color, $sledge-hammer);
    } @else {
      color: get-contextual-color($scheme, $font-color) $sledge-hammer;
    }
  } @else { // Theme variations
    @include color($scheme, $font-color, $sledge-hammer);
  }

}

//
// CONTEXTUAL & THEME BACKGROUND VARIANTS
// ======================================================

@mixin background-theme($scheme, $tone:base, $sledge-hammer:null) {

  @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations
    background-color: get-contextual-color($scheme, $tone) $sledge-hammer;
  } @else { // Theme variations
    @include background-color($scheme, $tone, $sledge-hammer);
  }
}

//
// CONTEXTUAL & THEME BACKGROUND WITH TEXT VARIANTS
// ======================================================

@mixin background-text-theme($scheme, $tone:base, $font-color:font-color, $sledge-hammer:null) {

  @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations
    background-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    @include text-theme($scheme, $font-color, $sledge-hammer);
  } @else { // Theme variations
    @include background-color($scheme, $tone, $sledge-hammer);
    @include text-theme($scheme, $font-color, $sledge-hammer);
  }
}

//
// CONTEXTUAL & THEME BORDER VARIANTS
// ======================================================

@mixin border-theme($scheme, $tone:base, $position:all, $sledge-hammer:null) {

  @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations

    @if $position == 'all' {
      border-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    } @else if $position == 'top' {
      border-top-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    } @else if $position == 'bottom' {
      border-bottom-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    } @else if $position == 'right' {
      border-right-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    } @else if $position == 'left' {
      border-left-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    } @else if $position == 'top-bottom' {
      border-top-color: get-contextual-color($scheme, $tone) $sledge-hammer;
      border-bottom-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    } @else if $position == 'right-left' {
      border-right-color: get-contextual-color($scheme, $tone) $sledge-hammer;
      border-left-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    } @else if $position == 'left-bottom' {
      border-bottom-color: get-contextual-color($scheme, $tone) $sledge-hammer;
      border-left-color: get-contextual-color($scheme, $tone) $sledge-hammer;
    }

  } @else { // Theme variations

    @if $position == 'all' {
      @include border-color($scheme, $tone, $sledge-hammer);
    } @else if $position == 'top' {
      @include border-top-color($scheme, $tone, $sledge-hammer);
    } @else if $position == 'bottom' {
      @include border-bottom-color($scheme, $tone, $sledge-hammer);
    } @else if $position == 'right' {
      @include border-right-color($scheme, $tone, $sledge-hammer);
    } @else if $position == 'left' {
      @include border-left-color($scheme, $tone, $sledge-hammer);
    } @else if $position == 'top-bottom' {
      @include border-top-color($scheme, $tone, $sledge-hammer);
      @include border-bottom-color($scheme, $tone, $sledge-hammer);
    } @else if $position == 'right-left' {
      @include border-left-color($scheme, $tone, $sledge-hammer);
      @include border-right-color($scheme, $tone, $sledge-hammer);
    } @else if $position == 'left-bottom' {
      @include border-left-color($scheme, $tone, $sledge-hammer);
      @include border-bottom-color($scheme, $tone, $sledge-hammer);
    }

  }
}

//
// CONTEXTUAL & THEME TEXT WITH LINK VARIANTS
// ======================================================

@mixin text-link-theme($scheme, $font-hover-color:dark, $font-active-color:x-dark, $sledge-hammer:null) {
  @at-root a#{&} {
    #{$hover-tags} {
      @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations
        @include text-theme($scheme, $font-hover-color, $sledge-hammer);
      } @else { // Theme variations
        @include text-theme($scheme, $font-hover-color, $sledge-hammer);
      }
    }

    #{$active-tags},
    #{$focus-tags} {
      @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations
        @include text-theme($scheme, $font-active-color, $sledge-hammer);
      } @else { // Theme variations
        @include text-theme($scheme, $font-active-color, $sledge-hammer);
      }
    }
  }
}

//
// BUTTONS THEME
// ======================================================

// TODO: http://demos.creative-tim.com/now-ui-kit/documentation/tutorial-components.html?ref=nuk-free-doc#buttons-row

@mixin btn-theme($scheme, $bg-type:fill, $tone:base, $tone-hover:dark, $tone-active:xx-dark, $font-color:font-color) {

  @if $bg-type == fill {
    @include background-text-theme($scheme, $tone, $font-color);
    @include border-theme($scheme, $tone);
    #{$focus-tags-btn} {
      @include background-text-theme($scheme, $tone-hover, $font-color);
      @include border-theme($scheme, $tone);
    }
  }

  @if $bg-type == outline {
    background-color: transparent;
    @include border-theme($scheme, $tone);
    @include text-theme($scheme, $tone);
  }

  @if $bg-type == soft {
    background-color: get-theme-color-level($scheme, $tone, $soft-bg-level);
    border-color: get-theme-color-level($scheme, $tone, $soft-border-level);
    color: get-theme-color-level($scheme, $tone, $soft-color-level);
  }

  #{$hover-tags} {
    @include border-theme($scheme, $tone-hover);
    @include background-text-theme($scheme, $tone-hover, $font-color);
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    @include border-theme($scheme, $tone-active);
    @include background-text-theme($scheme, $tone-active, $font-color);

    &:focus {
      box-shadow: none;
    }
  }

  &.btn-link {
    @include text-theme($scheme, $tone);

    #{$hover-tags} {
      @include text-theme($scheme, $tone-hover);
    }

    &:not(:disabled):not(.disabled),
    .show > &.dropdown-toggle {
      @include text-theme($scheme, $tone-active);
    }

  }

  &.btn-raised {
    @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations
      box-shadow: 0 $btn-raised-box-shadow-y-offset 0 0 get-contextual-color($scheme, $tone-active);
    } @else { // Theme variations
      $box-shadow-color: get-theme-main-color($scheme, $tone-active);
      box-shadow: 0 $btn-raised-box-shadow-y-offset 0 0 $box-shadow-color;
    }

    #{$hover-tags},
    #{$active-tags},
    .show > &.dropdown-toggle
      //.show > &.dropdown-toggle:focus,
      //.show > &.dropdown-toggle:hover
    {
      @include border-theme($scheme, $tone);
      @include background-text-theme($scheme, $tone, $font-color);
    }

    #{$hover-tags},
    #{$active-tags} {
      @if map-has-key($contextual-palette-map, $scheme) { // Contextual variations
        box-shadow: 0 $btn-raised-box-shadow-y-offset-hover 0 0 get-contextual-color($scheme, $tone-active);
      } @else { // Theme variations
        $box-shadow-color: get-theme-main-color($scheme, $tone-active);
        box-shadow: 0 $btn-raised-box-shadow-y-offset-hover 0 0 $box-shadow-color;
      }
    }
  }

}

//
// SOCIAL BUTTONS THEME
// ======================================================

@mixin btn-social-theme($tone:base, $tone-hover:dark, $tone-active:x-dark, $font-color:font-color, $bg-type:fill) {

  border-color: $tone;

  // Filled button
  @if $bg-type == fill {
    background-color: $tone;
    color: $font-color;
  }
  // Outline button
  @if $bg-type == outline {
    background-color: transparent;
    background-color: $tone-hover;
    border-color: $tone-hover;
    color: $tone
  }

  #{$hover-tags} {
    color: $font-color;
  }

  #{$active-tags},
    //#{$focus-tags},
  .show > &.dropdown-toggle
    //.show > &.dropdown-toggle:focus,
    //.show > &.dropdown-toggle:hover
  {
    background-color: $tone-active;
    border-color: $tone-active;
    color: $font-color;
  }

  &.btn-link {
    color: $tone;

    #{$hover-tags} {
      color: $tone-hover;
    }

    #{$active-tags}
      // #{$focus-tags}
    {
      color: $tone-active;
    }
  }

}

//
// BUTTON SIZES
// ======================================================

@mixin btn-size($padding-y, $padding-x, $min-width, $min-height, $font-size, $border, $line-height) {
  @include set-border-radius($border);
  min-width: $min-width;
  min-height: $min-height;
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
}

//
// BADGES THEME
// ======================================================

@mixin badges-theme($scheme, $bg-type:fill, $tone:base, $tone-hover:dark, $tone-active:x-dark,  $font-color:font-color, $sledge-hammer:null) {

  // Filled badge
  @if $bg-type == fill {
    @include background-text-theme($scheme, $tone, $font-color, $sledge-hammer);
    @include border-theme($scheme, $tone);
    * {
      @include text-theme($scheme, $font-color, $sledge-hammer);
    }

    &.ribbon {
      &::before {
        @include border-theme($scheme, xx-dark, top, $sledge-hammer: !important);
      }
    }
  }

  @if $bg-type == soft {
    background-color: get-theme-color-level($scheme, $tone, $soft-bg-level);
    border-color: get-theme-color-level($scheme, $tone, $soft-border-level);
    &,
    & * {
      color: get-theme-color-level($scheme, $tone, $soft-color-level);
    }
    &.ribbon {
      &::before {
        border-top-color: get-theme-color-level($scheme, $tone, $soft-border-level) !important;
      }
    }
  }

  // Outline badge
  @if $bg-type == outline {
    background-color: transparent;
    @include border-theme($scheme, $tone);
    &,
    & * {
      @include text-theme($scheme, $tone, $sledge-hammer);
    }
  }

  // Link Badges
  @at-root a#{&} {
    #{$hover-tags} {
      @include border-theme($scheme, $tone-hover);
      @include background-text-theme($scheme, $tone-hover, $font-color, $sledge-hammer);

      * {
        @include text-theme($scheme, $font-color, $sledge-hammer);
      }

    }

    #{$focus-tags},
    #{$active-tags} {
      @include border-theme($scheme, $tone-active);
      @include background-text-theme($scheme, $tone-active, $font-color, $sledge-hammer);
      @include box-shadow(none);
    }
  }

}

//
// AVATARS THEME
// ======================================================
@mixin avatar-theme($scheme, $bg-type:fill, $tone:base, $tone-hover:dark, $tone-active:xx-dark, $font-color:font-color, $sledge-hammer:null) {

  @if $bg-type == fill {
    @include background-text-theme($scheme, $tone, $font-color);
  }

  @if $bg-type == soft {
    background-color: get-theme-color-level($scheme, $tone, $soft-bg-level);
    color: get-theme-color-level($scheme, $tone, $soft-color-level);
  }

  // Link Badges
  @at-root a#{&} {
    #{$hover-focus-tags} {
      @include background-text-theme($scheme, $tone-hover, $font-color, $sledge-hammer);
    }

    #{$active-tags} {
      @include background-text-theme($scheme, $tone-active, $font-color, $sledge-hammer);
    }
  }


}

//
// BREADCRUMB EXTENDED - WIZARD
// ======================================================

@mixin breadcrumb-wizard-status($scheme, $tone:base, $tone-before:x-dark, $font-color:font-color) {

  &,
  &:hover {
    @include background-theme($scheme, $tone);

    &::after {
      @include border-theme($scheme, $tone, $position: left);
    }

    &::before {
      @include border-theme($scheme, $tone-before, $position: left);
    }
  }

  a {
    @include text-theme($scheme, $font-color);
  }

}

//
// POPOVER THEME
// ======================================================

@mixin popover-theme($scheme, $tone:base, $tone-header:dark, $tone-border:dark, $font-color:font-color) {

  @include border-theme($scheme, $tone-border);
  @include background-theme($scheme, $tone);

  .popover-body {
    @include text-theme($scheme, $font-color);
  }

  &.bs-popover-right .arrow:after {
    @include border-theme($scheme, $tone, $position: right);
  }

  &.bs-popover-top .arrow:after {
    @include border-theme($scheme, $tone, $position: top);
  }

  &.bs-popover-bottom .arrow:after {
    @include border-theme($scheme, $tone, $position: bottom);
  }

  &.bs-popover-left .arrow:after {
    @include border-theme($scheme, $tone, $position: left);
  }

  .popover-header {
    @include border-theme($scheme, $tone-header);
    @include background-text-theme($scheme, $tone-header, $font-color);
  }
}

//
// TAB EXTENDED - BOXED
// ======================================================

@mixin tab-extended-boxed-theme($scheme, $tone:base, $font-color:font-color) {

  @include background-theme($scheme, $tone);

  .nav-link,
  .boxed-tab-title {
    @include text-theme($scheme, $font-color);
  }

  .nav-link.active,
  .nav-link:hover,
  .nav-link:focus,
  .nav-item.show .nav-link {
    @include text-theme($scheme, $tone);
  }

}

//
// TOOLTIP THEME
// ======================================================

@mixin tooltip-theme($scheme, $tone:base, $font-color:font-color) {

  .tooltip-inner {
    @include background-text-theme($scheme, $tone, $font-color);
  }

  // Right tooltip
  &.bs-tooltip-right .arrow:before {
    @include border-theme($scheme, $tone, $position: right);
  }

  // Top tooltip
  &.bs-tooltip-top .arrow:before {
    @include border-theme($scheme, $tone, $position: top);
  }
  // Bottom tooltip
  &.bs-tooltip-bottom .arrow:before {
    @include border-theme($scheme, $tone, $position: bottom);
  }

  // Left tooltip
  &.bs-tooltip-left .arrow:before {
    @include border-theme($scheme, $tone, $position: left);
  }

}

//
// PAGINATION SIZE
// ======================================================

@mixin pagination-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  .page-link {
    padding: $padding-y $padding-x;
    font-size: $font-size;
    line-height: $line-height;

    // Next/Prev icons
    #{$icon-tags} {
      font-size: $font-size;
      line-height: $line-height;
    }
  }

  .page-item {
    &:first-child {
      .page-link {
        @include border-left-radius($border-radius);
      }
    }

    &:last-child {
      .page-link {
        @include border-right-radius($border-radius);
      }
    }
  }
}

//
// MODAL THEME
// ======================================================

@mixin modal-theme($scheme, $type:fill,  $tone:base, $tone-border:dark, $font-color:font-color) {

  @if $type == fill {
    .modal-header {
      @include border-theme($scheme, $tone-border);
      @include background-text-theme($scheme, $tone, $font-color);
    }
    // Title text within header
    .modal-title {
      @include text-theme($scheme, $font-color);
    }

    button.close {
      @include text-theme($scheme, $font-color);
    }
  }

  @if $type == soft {
    .modal-header {
      background-color: get-theme-color-level($scheme, $tone, $soft-bg-level);
      border-color: get-theme-color-level($scheme, $tone, $soft-border-level);
    }
    .modal-title {
      color: get-theme-color-level($scheme, $tone, $soft-color-level);
    }
    .modal-content {
      background-color: get-theme-color-level($scheme, $tone, $soft-bg-level);
      color: get-theme-color-level($scheme, $tone, $soft-color-level);
    }
    .modal-footer {
      background-color: get-theme-color-level($scheme, $tone, $soft-bg-level+1);
      border-color: get-theme-color-level($scheme, $tone, $soft-border-level+1);
    }
  }

}

//
// TOGGLE SWITCH THEME
// ======================================================

@mixin switch-theme($scheme, $tone-bg:base, $tone-border:base, $font-color:font-color) {

  $cci: custom-control-input;
  $ccind: custom-control-indicator;

  .#{$cci}:checked + .#{$ccind},
  .#{$cci}:checked:active + .#{$ccind} {

    @include border-theme($scheme, $tone-border);
    @include background-theme($scheme, $tone-bg);

    &:after {
      @include background-theme($scheme, $font-color);
    }

    &:before {
      @include text-theme($scheme, $font-color);
    }

  }
  &.mini .#{$cci}:checked + .#{$ccind},
  &.mini .#{$cci}:checked:active + .#{$ccind} {
    &:after {
      @if ($scheme == 'light') { // Fix knob color on light switch
        @include background-theme($scheme, $font-color);
      } @else {
        @include background-theme($scheme, $tone-bg);
      }
    }

  }

}

//
// FLIPPED TOGGLE SWITCH THEME
// ======================================================

@mixin switch-flip-theme($scheme, $tone:base, $font-color:font-color) {

  $ccind: custom-control-indicator;

  .#{$ccind} {
    &:after {
      @include background-text-theme($scheme, $tone, $font-color);
    }
  }

}

//
// ALERT THEME
// ======================================================

@mixin alert-theme($tone-bg, $tone-border, $font-color) {

  background-color: $tone-bg;
  border-color: $tone-border;
  color: $font-color;

  hr {
    border-top-color: darken($tone-border, 5%);
  }

  // Close button
  @at-root &.alert-dismissible > .close {
    color: $font-color;
  }

  // Link color
  & .alert-link {
    &,
    #{$hover-focus-tags} {
      color: darken($font-color, 10%);
    }
  }

  p {
    color: $font-color;
  }

}

//
// LIST GROUP
// ======================================================

// List group theme
@mixin list-group-theme($scheme, $tone, $tone-active, $font-color, $color-shade-amount) {

  background-color: $tone;
  color: $font-color !important;

  &.list-group-item-action {

    #{$hover-focus-tags} {
      background-color: darken($tone, $color-shade-amount) !important;
      color: darken($font-color, $color-shade-amount) !important;
    }

    &.active {
      @include background-text-theme($scheme, $tone-active, $sledge-hammer: !important);
      @include border-theme($scheme, $tone-active, $sledge-hammer: !important);
    }
  }

  a {
    color: $font-color !important;

    #{$hover-focus-tags} {
      color: darken($font-color, $color-shade-amount) !important;
    }
  }

}

// List group sizing
@mixin list-group-size($padding-y, $padding-x, $font-size, $border-radius, $line-height) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;

  &:first-child {
    @include border-top-radius($border-radius);
  }

  &:last-child {
    @include border-bottom-radius($border-radius);
  }
}

//
// NESTABLE GROUP
// ======================================================

// Nestable group theme
@mixin nestable-theme($tone, $font-color, $color-shade-amount) {
  .dd-handle,
  .drag-content {
    background-color: $tone;
    color: $font-color;

    &:hover {
      background-color: darken($tone, $color-shade-amount);
      color: darken($font-color, $color-shade-amount);
    }

    a {
      color: $font-color !important;

      &:hover,
      &:focus {
        color: darken($font-color, $color-shade-amount) !important;
      }
    }

  }

  .dd-item > button {
    color: $font-color;
  }
}

// Nestable group sizing
@mixin nestable-size($padding-y, $padding-x, $font-size, $border-radius, $line-height) {
  @include set-border-radius($border-radius);
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
}

//
// PROGRESS BARS THEME
// ======================================================

@mixin progress-bar-theme($scheme, $tone:base, $font-color:font-color) {
  span.progress-label {
    @include background-text-theme($scheme);
    @include border-theme($scheme, $tone);
    /* &::after {
       @include border-theme($scheme, $tone, $position: bottom);
     }*/
  }
}

//
// LIST GROUP ITEM - HORIZONTAL
// ======================================================

@mixin list-group-item-horizontal() {

  &:first-child {
    @include border-left-radius($list-group-border-radius);
    border-top-right-radius: 0;
  }

  &:last-child {
    @include border-right-radius($list-group-border-radius);
    border-bottom-left-radius: 0;
  }

  & + .list-group-item {
    border-top-width: $list-group-border-width;

    &.active {
      margin-left: -$list-group-border-width;
      border-left-width: $list-group-border-width;
    }
  }

}


//
// SIDEBAR THEME
// ======================================================

@mixin sidebar-theme($scheme: null, $font-color: null, $font-link-color: null, $font-hover-color: null, $font-active-color: null, $bg: false, $font: false) {

  $s: sidebar;

  @if bool($bg) == true {
    & {
      @include background-theme($scheme);
    }
  }

  @if bool($font) == true {
    .#{$s}__inner-wrap {
      color: $font-color;
    }
  }

  .#{$s}__list {

    @if bool($font) == true {
      .#{$s}__item-header {
        color: $font-color;

        &::after {
          background-color: $font-color;
        }
      }
    }

    @if (bool($bg) == true and bool($enable-sidebar-divider-underline-type)==true) {
      .#{$s}__divider {
        @include background-theme($scheme, 'xx-light');
      }
    }

    .#{$s}__item {
      @if bool($font) == true {
        > .#{$s}__link {
          color: $font-link-color;
        }
      }

      // Change the hover, focus, active state links for better highlighting
      &:hover,
      &.show,
      &.active {
        > .#{$s}__link {
          @if bool($font) == true {
            color: $font-hover-color;
          }
          @if bool($bg) == true {
            @include background-theme($scheme, 'dark');
          }
        }
      }

      @if bool($font) == true {
        // Current item
        &.active {
          > .#{$s}__link {
            color: $font-active-color;
          }
        }
      }
    }

    @if bool($bg) == true {
      .#{$s}__child {
        @include background-theme($scheme, 'dark');

        .#{$s}__item {

          // Change the hover, focus, active state links for better highlighting
          //&.show,
          &:hover {
            > .#{$s}__link:not(.has-arrow) {
              @include background-theme($scheme, 'x-dark');
            }
          }

          // Current item
          &.active {
            > .#{$s}__link:not(.has-arrow) {
              @include background-theme($scheme, 'xx-dark');
            }
          }
        }
      }
    }
  }

  @if bool($bg) == true {
    // Sidebar - Collapsible
    @at-root .#{$s}-mini #{&}.collapsible {
      &:not(:hover) {
        .#{$s}__list {
          .#{$s}__divider {
            @include background-theme($scheme, 'xx-light');
          }

          > .#{$s}__item:not(.has-button) {
            > .#{$s}__child {
              &::before {
                @include border-theme($scheme, 'xx-light', 'left');
              }
            }

            .#{$s}__child {
              .#{$s}__item.active > .#{$s}__link {
                &::before {
                  @include background-theme($scheme, 'xx-light');
                }
              }
            }
          }
        }
      }
    }
  }

  @if bool($bg) == true {
    // Sidebar - Popout
    @at-root .#{$s}-mini #{&}.popout .#{$s}__list.navigation-main {
      @include background-theme($scheme);
    }
  }

  .#{$s}-footer {

    @if bool($bg) == true {
      @include background-theme($scheme);
      @include border-theme($scheme, 'dark', $position: top);
    }

    .#{$s}-footer__item {
      @if bool($font) == true {
        > .#{$s}-footer__link {
          color: $font-link-color;
        }
      }

      &:hover {
        > .#{$s}-footer__link {
          @if bool($bg) == true {
            @include background-theme($scheme, 'dark');
          }
          @if bool($font) == true {
            color: $font-hover-color;
          }
        }
      }

      &.active {
        > .#{$s}-footer__link {
          @if bool($bg) == true {
            @include background-theme($scheme, 'dark');
          }
          @if bool($font) == true {
            color: $font-active-color;
          }
        }
      }
    }

    @if bool($bg) == true {
      .#{$s}-footer__child {
        .#{$s}-footer__item {
          &:hover {
            > .#{$s}-footer__link:not(.has-arrow) {
              @include background-theme($scheme, 'x-dark');
            }
          }

          &.active {
            > .#{$s}-footer__link:not(.has-arrow) {
              @include background-theme($scheme, 'xx-dark');
            }
          }
        }
      }
    }

    .#{$s}-footer__nav > ul > .#{$s}-footer__item > .#{$s}-footer__child {
      @if bool($bg) == true {
        @include background-theme($scheme, 'dark');
      }
      @if bool($font) == true {
        border-top-color: $font-active-color;
      }
    }

    // Sidebar mini toggle button
    .#{$s}__footer--toggler {
      @if bool($font) == true {
        .icon-bar {
          background-color: $font-link-color;
        }
      }

      &.collapsed,
      &:hover {
        @if bool($bg) == true {
          @include background-theme($scheme, 'dark');
        }
        @if bool($font) == true {
          .icon-bar {
            background-color: $font-active-color;
          }
        }
      }
    }

  }

}

//
// NAVBAR THEME
// ======================================================
@mixin navbar-theme($scheme: null, $font-color: null, $font-link-color: null, $font-hover-color: null, $font-active-color: null, $bg: false, $font: false) {
  $nb: navbar;

  @if bool($bg) == true {
    & {
      @include background-theme($scheme);
    }
  }

  @if bool($font) == true {
    // Change the brand color
    .#{$nb}-brand {
      color: $font-link-color;
      // Change the hover and focus state for better highlighting
      #{$hover-focus-tags} {
        color: $font-hover-color;
      }
    }
  }

  .#{$nb}-nav {
    @if bool($font) == true {
      @if bool($navbar-item-mobile-bottom-border) == true {
        .nav-item {
          &::before {
            background-color: $font-color;
          }
        }
      }
    }

    // Navbar menu links and text
    .nav-text {
      @if bool($font) == true {
        color: $font-link-color;
      }
    }

    .nav-link {
      @if bool($font) == true {
        color: $font-link-color;
      }

      // Change the hover, focus, active state links for better highlighting
      #{$hover-focus-tags} {
        @if bool($font) == true {
          color: $font-hover-color;
        }
        @if bool($bg) == true {
          @include background-theme($scheme, 'dark');
        }
      }

      @if bool($font) == true {
        &.disabled {
          color: $font-link-color !important;
        }
      }
    }

    // Change the color of open, show, active links for better highlighting
    .open > .nav-link,
    .show > .nav-link,
    .active > .nav-link,
    .nav-link.show,
    .nav-link.active {
      @if bool($bg) == true {
        @include background-theme($scheme, 'x-dark');
      }
      @if bool($font) == true {
        color: $font-active-color;
      }
    }
  }

  @if bool($font) == true {
    @if bool($navbar-item-mobile-bottom-border) == true {
      .#{$nb}-nav.no-collapse {
        &::before {
          background-color: $font-color;
        }
      }
    }
  }

  @if bool($font) == true {
    .#{$nb}-text {
      color: $font-color;

      a {
        color: $font-link-color;

        #{$hover-focus-tags} {
          color: $font-hover-color;
        }
      }
    }
  }
}

//
// FORMS
// ======================================================

// Form control focus state
@mixin form-control-focus() {
  &:focus {
    //@include transition;
    color: $input-focus-color;
    @include border-theme($input-focus-border-theme-scheme, $input-focus-border-theme-tone);
    box-shadow: none;

    &:hover {
      @include border-theme($input-focus-border-theme-scheme, $input-focus-border-theme-tone);
    }
  }
}

// Form control hover state
@mixin form-control-hover() {
  &:hover {
    border-color: $input-hover-border-color;
  }
}

// Form control disabled state
@mixin form-control-disabled() {

  #{$disabled-tags},
  &[readonly] {
    background-color: $input-disabled-bg;
    border-color: $input-disabled-border-color;
    color: $input-disabled-color;

    &:hover:not([readonly]) {
      cursor: $cursor-not-allowed;
    }

    &::placeholder {
      color: $input-disabled-color;
    }
  }
}

@mixin form-validation-state-vendor($state, $color) {
  .was-validated &:#{$state},
  .is-#{$state} &,
  &.is-#{$state} {
    box-shadow: none;
    background-color: rgba($color, .1);
    border-color: rgba($color, .6);

    &:focus {
      box-shadow: none;
      border-color: $color;

      &:hover {
        border-color: $color;
      }
    }
  }
}

// Form validation mixin for dynamic states.
@mixin form-validation-state($state, $color) {

  .#{$state}-feedback {
    @include transition;
    color: $color;
  }

  .#{$state}-tooltip {
    @include transition;
    padding: .2rem .3rem;
    background-color: rgba($color, .8);
  }

  .form-control,
  .custom-select {
    .was-validated &:#{$state},
    &.is-#{$state} {
      box-shadow: none;
      background-color: rgba($color, .1);
      border-color: rgba($color, .6);

      &:focus {
        box-shadow: none;
        border-color: $color;

        &:hover {
          border-color: $color;
        }
      }
    }
  }

  .form-check-input {
    .was-validated &:#{$state},
    &.is-#{$state} {
      + .form-check-label {
        @include transition;
        color: $color;
      }
    }
  }

  .custom-control-input {
    .was-validated &:#{$state},
    &.is-#{$state} {
      ~ .custom-control-label {
        color: $color;

        &::before {
          background-color: lighten($color, 10%);
          border-color: transparent;
        }
      }

      &:focus ~ .custom-control-label::before {
        box-shadow: none;
      }
    }
  }

  // Custom select
  .custom-select {
    .was-validated &:#{$state},
    &.is-#{$state} {
      color: $color;
    }
  }

  // Custom file upload
  .custom-file-input {

    .was-validated &:#{$state},
    &.is-#{$state} {
      ~ .custom-file-label {
        box-shadow: none;
        border-color: rgba($color, .6);
        color: $color;

        &::after {
          background-color: rgba($color, .1);
          border-color: rgba($color, .6);
          color: $color;
        }
      }

      &:focus {
        ~ .custom-file-label {
          box-shadow: none;
          border-color: $color;

          &::after {
            border-color: $color;
          }
        }
      }
    }
  }

  // Toggle switch
  //.custom-toggle-switch .custom-control-input {
  //[class*="custom-toggle-"] .custom-control-input {
  [class*="switch-"] .custom-control-input {
    &:checked {
      .was-validated &:#{$state},
      &.is-#{$state} {
        ~ .custom-control-indicator {
          //border-color: transparent;
          border-color: lighten($color, 10%) !important;
          //&:after {
          //  background: $custom-toggle-knob-bg;
          //}
        }
      }
    }

    .was-validated &:#{$state},
    &.is-#{$state} {
      ~ .custom-control-indicator {
        //background: $white-color;
        border-color: lighten($color, 10%) !important;
        //&:after {
        //  background-color: lighten($color, 10%);
        //}
      }
    }
  }

  // Used for jQuery icon validation
  .form-group {
    &.is-#{$state} i.status {
      color: $color;
    }
  }

}

//
// TRANSPARENT FORMS
// ======================================================

@mixin transparent-forms($background-color,$background-focus-color,$border-color,$border-focus-color,$font-color,$font-focus-color, $label-color, $placeholder-disable-color) {

  %transparent-form-control {
    background-color: $background-color;
    border-color: $border-color;
    color: $font-color;

    &::placeholder {
      color: $placeholder-disable-color;
    }

    &:hover:not([disabled]):not([readonly]),
    &:focus:not([disabled]):not([readonly]) {
      background-color: $background-focus-color;
      border-color: $border-focus-color;
      color: $font-focus-color;
    }

    &:focus {
      &:hover {
        border-color: $border-focus-color;
      }
    }

    &:disabled,
    &[readonly] {
      background-color: $background-color;
      opacity: 0.7;
      color: $font-color;
    }
  }

  .form-control {
    @extend %transparent-form-control;
  }

  // Labels and legends.
  form {
    label,
    .col-form-legend,
    .custom-control-description {
      color: $label-color;
    }
  }

  // Readonly controls as plain text
  .form-control-plaintext {
    color: $label-color;
  }

  // Checkboxes and radios disabled labels
  .form-check-input {
    &:disabled ~ .form-check-label {
      opacity: 0.6;
      color: $label-color;
    }
  }

  // Custom checkboxes and radios disabled labels
  .custom-control-input {
    &:disabled {
      ~ .custom-control-label {
        opacity: 0.6;
        color: $label-color;
      }
    }
  }

  // Custom select
  .custom-select {
    @extend %transparent-form-control;
    border: none;
  }

  // Custom file input
  .custom-file-label {
    background-color: $background-color;
    border: none;
    color: $placeholder-disable-color;

    &::after {
      top: 0;
      background-color: $background-color;
      border: none;
      color: $font-focus-color;
    }
  }

  // Input group with icon addon
  .input-group {
    &[class*="with-addon-icon"] {
      .input-group-text {
        background-color: $background-color;
      }

      .input-group-prepend {
        margin-right: 0;
      }

      .input-group-append {
        margin-left: 0;
      }
    }
  }

  .input-group-text {
    background-color: $background-color;
    border: none;
    color: $font-color;
  }
  .input-group-focus,
  .input-group-hover {
    .input-group-text,
    .custom-select {
      color: $font-focus-color;
    }

    &.input-group[class*="with-addon-icon"] {
      .input-group-text {
        background-color: $background-focus-color;
      }
    }
  }

  .disabled,
  .readonly {
    &.input-group-text {
      background-color: $background-color !important;
      color: $placeholder-disable-color;
    }
  }

  // Chosen select
  .chosen-single,
  .chosen-choices {
    @extend %transparent-form-control;
  }
  .chosen-single div b {
    background-color: transparent !important;
  }
  .chosen-choices {
    border: none
  }
  .chosen-container-multi .chosen-choices li.search-field input[type="text"],
  .chosen-container-single .chosen-default {
    color: $placeholder-disable-color !important;
  }
  .chosen-single abbr {
    &::after {
      color: $font-color;
    }
  }
  .chosen-container-active {
    .chosen-choices {
      li.search-field input[type="text"] {
        color: $font-focus-color !important;
      }
    }
  }
}
